{"version":3,"sources":["utils/gen.utils.js","components/Addurl/index.js","components/Header/index.js","components/RecentUrls/index.js","screens/home.js","screens/redirect.js","routes.js","App.js","serviceWorker.js","reducers/userReducer.js","reducers/index.js","store.js","index.js"],"names":["API_URL","SITE_URL","Addurl","props","useState","link","setLink","errors","setErrors","loader","setLoader","data","setData","Container","style","backgroundColor","Jumbotron","Spinner","animation","role","className","Row","Col","md","Form","Group","Control","size","type","placeholder","onChange","e","target","value","match","handleChange","Button","variant","block","onClick","shortUrlsave","length","result","characters","charactersLength","i","charAt","Math","floor","random","shortUrlmake","axios","post","originalUrl","shortUrl","then","res","setNewData","_id","disabled","OriginalUrl","ShortUrl","Header","alignItems","textAlign","padding","color","RecentUrls","console","log","Table","striped","hover","responsive","cellSpacing","slice","map","index","key","format","createdAt","colSpan","Home","newData","useEffect","Axios","get","flex","Redirect","id","useParams","originaUrl","window","location","marginTop","Routes","path","exact","component","App","Boolean","hostname","initialNewsState","user","isLoggedin","userReducer","state","action","payload","rootReducer","combineReducers","middleware","thunk","persistConfig","storage","persistedReducer","persistReducer","persistStore","store","createStore","compose","applyMiddleware","logger","persistor","persist","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kUAAaA,EAAU,gDAGVC,EACX,0D,gDC6FaC,EAhFA,SAACC,GAAW,IAAD,EACAC,mBAAS,MADT,mBACjBC,EADiB,KACXC,EADW,OAEIF,oBAAS,GAFb,mBAEjBG,EAFiB,KAETC,EAFS,OAGIJ,oBAAS,GAHb,mBAGjBK,EAHiB,KAGTC,EAHS,OAIAN,mBAAS,MAJT,mBAIjBO,EAJiB,KAIXC,EAJW,KAuBxB,OACE,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,gBAAiB,YACnC,kBAACC,EAAA,EAAD,KACE,6DACCP,EACC,kBAACQ,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAMC,UAAU,WAAhB,eAGF,oCACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,QAAN,CACEC,KAAK,KACLC,KAAK,OACLC,YAAY,uBACZC,SAAU,SAACC,GAAD,OAnCP,SAACA,GDbX,MCcMA,EAAEC,OAAOC,MDjBVC,MACd,8HCiBE5B,EAAQyB,EAAEC,OAAOC,OACjBzB,GAAU,IAgCqB2B,CAAaJ,QAIpC,kBAACT,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACa,EAAA,EAAD,CACEC,QAAQ,UACRV,KAAK,KACLW,OAAK,EACLC,QAtCG,WACjB7B,GAAU,GACV,IAAI8B,EDjBoB,SAACC,GAK3B,IAJA,IAAIC,EAAS,GACTC,EACF,iEACEC,EAAmBD,EAAWF,OACzBI,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BH,GAAUC,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAEzD,OAAOF,ECScQ,CAAa,GAChCC,IACGC,KADH,UACWpD,EADX,QAC0B,CAAEqD,YAAahD,EAAMiD,SAAUd,IACtDe,MAAK,SAACC,GACL5C,EAAQ4C,EAAI7C,MACZD,GAAU,GACVF,GAAU,GACVL,EAAMsD,WAAWD,EAAI7C,KAAK+C,SA8BhBC,WAAUpD,GALZ,iBAWM,OAATI,EACC,oCACE,wCACY,2BAAIA,EAAKiD,YAAT,MAEZ,yCACa,qCAAO3D,GAAP,OAAkBU,EAAKkD,aAItC,oCACE,mFACA,wGCnEDC,EAhBA,WACb,OACE,kBAACjD,EAAA,EAAD,KACE,wBACEC,MAAO,CACLiD,WAAY,SACZC,UAAW,SACXC,QAAS,GACTC,MAAO,YALX,mB,gBCqCSC,EAtCI,SAAChE,GAElB,OADAiE,QAAQC,IAAIlE,EAAMQ,MAEhB,kBAACE,EAAA,EAAD,CAAWC,MAAO,CAAEmD,QAAS,IAC3B,kBAACK,EAAA,EAAD,CAAOC,SAAO,EAACC,OAAK,EAACC,WAAW,KAAKC,YAAa,EAAGrC,QAAQ,QAC3D,+BACE,4BACE,iCACA,mCACA,yCACA,4CAGJ,+BACGlC,EAAMQ,KAAK8B,OAAS,EACnBtC,EAAMQ,KAAKgE,MAAM,EAAG,GAAGC,KAAI,SAACjE,EAAMkE,GAChC,OACE,wBAAIC,IAAKD,GACP,4BAAKA,EAAQ,GACb,4BAAKlE,EAAKiD,aACV,4BACG3D,EACAU,EAAKkD,UAER,4BAAKkB,YAAOpE,EAAKqE,gBAKvB,4BACE,wBAAIC,QAAS,GAAb,uB,MCGCC,MA7Bf,WAAiB,IAAD,EACc9E,oBAAS,GADvB,mBACPK,EADO,KACCC,EADD,OAEUN,mBAAS,IAFnB,mBAEPO,EAFO,KAEDC,EAFC,OAGgBR,mBAAS,MAHzB,mBAGP+E,EAHO,KAGE1B,EAHF,KAad,OATA2B,qBAAU,WACR1E,GAAU,GACV2E,IAAMC,IAAN,UAAatF,EAAb,eAAkCuD,MAAK,SAACC,GACtC5C,EAAQ4C,EAAI7C,MACZD,GAAU,QAEX,CAACyE,IAEJf,QAAQC,IAAIc,GAEV,yBAAKrE,MAAO,CAAEyE,KAAM,IAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQ9B,WAAYA,IAEnBhD,EACC,kBAACQ,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAMC,UAAU,WAAhB,eAGF,kBAAC,EAAD,CAAYT,KAAMA,MCVX6E,EAhBE,WAAO,IAChBC,EAAOC,cAAPD,GAON,OANAL,qBAAU,WACRC,IAAMjC,KAAN,UAAcpD,EAAd,QAA6B,CAAEyF,GAAIA,IAAMlC,MAAK,SAACC,GAC7C,IAAImC,EAAanC,EAAI7C,KAAK,GAAGiD,YAC7BgC,OAAOC,SAAWF,OAEnB,CAACF,IAEF,yBAAK3E,MAAO,CAAEgF,UAAW,MACvB,kBAAC7E,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAMC,UAAU,WAAhB,iBCAO2E,EAZA,WACb,OACE,yBAAK3E,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4E,KAAK,IAAIC,OAAK,EAACC,UAAWhB,IACjC,kBAAC,IAAD,CAAOc,KAAK,OAAOC,OAAK,EAACC,UAAWV,QCE/BW,MARf,WACE,OACE,yBAAK/E,UAAU,OACb,kBAAC,EAAD,Q,MCKcgF,QACW,cAA7BR,OAAOC,SAASQ,UAEe,UAA7BT,OAAOC,SAASQ,UAEhBT,OAAOC,SAASQ,SAASnE,MACvB,2D,qEClBAoE,EAAmB,CACvBC,KAAM,GACNC,YAAY,GAqBCC,EAnBK,WAAuC,IAAtCC,EAAqC,uDAA7BJ,EAAkBK,EAAW,uCACxD,OAAQA,EAAO/E,MACb,IAAK,QACH,OAAO,2BACF8E,GADL,IAEEH,KAAMI,EAAOC,QACbJ,YAAY,IAEhB,IAAK,SACH,OAAO,2BACFE,GADL,IAEEH,KAAM,KACNC,YAAY,IAEhB,QACE,OAAOE,ICZEG,EAJKC,YAAgB,CAClCL,gBCGIM,EAAaC,IAEbC,EAAgB,CACpBnC,IAAK,OACLoC,aAGIC,EAAmBC,YAAeH,EAAeJ,GCJjDQ,EDMS,WACb,IAAIC,EAAQC,YACVJ,EACAK,YAAQC,YAAgBV,EAAYW,OAGtC,MAAO,CAAEJ,QAAOK,UADAN,YAAaC,ICXVM,GACrBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUT,MAAOD,EAAaC,OAC5B,kBAAC,IAAD,CACEU,QAAS,kBAAC/G,EAAA,EAAD,CAASC,UAAU,SAASmB,QAAQ,YAC7CsF,UAAWN,EAAaM,WAExB,kBAAC,EAAD,SAINM,SAASC,eAAe,SJ6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9E,MAAK,SAAA+E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrE,QAAQqE,MAAMA,EAAMC,c","file":"static/js/main.2da9a65c.chunk.js","sourcesContent":["export const API_URL = \"https://urlshortener05.herokuapp.com/api/urls\";\n// export const API_URL = \"http://localhost:4000/api/urls\";\n// export const SITE_URL = \"http://localhost:3000/\";\nexport const SITE_URL =\n  \"http://testdeploy5.s3-website.ap-south-1.amazonaws.com/\";\nexport const isUrlValid = (input) => {\n  var res = input.match(\n    /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/g\n  );\n  if (res == null) return false;\n  else return true;\n};\n\nexport const shortUrlmake = (length) => {\n  var result = \"\";\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n","import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport {\n  Button,\n  Col,\n  Container,\n  Form,\n  Jumbotron,\n  Row,\n  Spinner\n} from \"react-bootstrap\";\nimport {\n  API_URL,\n  isUrlValid,\n  shortUrlmake,\n  SITE_URL\n} from \"./../../utils/gen.utils\";\nconst Addurl = (props) => {\n  const [link, setLink] = useState(null);\n  const [errors, setErrors] = useState(true);\n  const [loader, setLoader] = useState(false);\n  const [data, setData] = useState(null);\n  const handleChange = (e) => {\n    if (isUrlValid(e.target.value)) {\n      setLink(e.target.value);\n      setErrors(false);\n    }\n  };\n  const submitForm = () => {\n    setLoader(true);\n    let shortUrlsave = shortUrlmake(5);\n    axios\n      .post(`${API_URL}/add`, { originalUrl: link, shortUrl: shortUrlsave })\n      .then((res) => {\n        setData(res.data);\n        setLoader(false);\n        setErrors(true);\n        props.setNewData(res.data._id);\n      });\n  };\n  return (\n    <Container style={{ backgroundColor: \"#e9ecef\" }}>\n      <Jumbotron>\n        <h3>Paste the URL to be shortened</h3>\n        {loader ? (\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n        ) : (\n          <>\n            <Row>\n              <Col md={8}>\n                <Form.Group>\n                  <Form.Control\n                    size=\"lg\"\n                    type=\"link\"\n                    placeholder=\"Enter the link here.\"\n                    onChange={(e) => handleChange(e)}\n                  />\n                </Form.Group>\n              </Col>\n              <Col md={4}>\n                <Button\n                  variant=\"primary\"\n                  size=\"lg\"\n                  block\n                  onClick={submitForm}\n                  disabled={errors ? true : false}\n                >\n                  Shorten Url\n                </Button>\n              </Col>\n            </Row>\n            {data !== null ? (\n              <>\n                <p>\n                  Long Url: <b>{data.OriginalUrl} </b>\n                </p>\n                <p>\n                  Short Url: <b>{`${SITE_URL}${data.ShortUrl}`}</b>\n                </p>\n              </>\n            ) : (\n              <>\n                <p>It is a free tool to shorten a URL or reduce a link.</p>\n                <p>\n                  URL Shortener to create a shortened link making it easy to\n                  remember.\n                </p>\n              </>\n            )}\n          </>\n        )}\n      </Jumbotron>\n    </Container>\n  );\n};\nexport default Addurl;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nconst Header = () => {\n  return (\n    <Container>\n      <h1\n        style={{\n          alignItems: \"center\",\n          textAlign: \"center\",\n          padding: 20,\n          color: \"#007bff\",\n        }}\n      >\n        URL Shortener\n      </h1>\n    </Container>\n  );\n};\nexport default Header;\n","import React from \"react\";\nimport { Container, Table } from \"react-bootstrap\";\nimport { format } from \"timeago.js\";\nimport { SITE_URL } from \"./../../utils/gen.utils\";\nconst RecentUrls = (props) => {\n  console.log(props.data);\n  return (\n    <Container style={{ padding: 0 }}>\n      <Table striped hover responsive=\"md\" cellSpacing={5} variant=\"dark\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>URL</th>\n            <th>Short URL</th>\n            <th>Created At</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.data.length > 0 ? (\n            props.data.slice(0, 5).map((data, index) => {\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{data.OriginalUrl}</td>\n                  <td>\n                    {SITE_URL}\n                    {data.ShortUrl}\n                  </td>\n                  <td>{format(data.createdAt)}</td>\n                </tr>\n              );\n            })\n          ) : (\n            <tr>\n              <td colSpan={4}>No data found!</td>\n            </tr>\n          )}\n        </tbody>\n      </Table>\n    </Container>\n  );\n};\nexport default RecentUrls;\n","import Axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { API_URL } from \"../utils/gen.utils\";\nimport Addurl from \"./../components/Addurl\";\nimport Header from \"./../components/Header\";\nimport RecentUrls from \"./../components/RecentUrls\";\nimport \"./home.css\";\nfunction Home() {\n  const [loader, setLoader] = useState(false);\n  const [data, setData] = useState([]);\n  const [newData, setNewData] = useState(null);\n  useEffect(() => {\n    setLoader(true);\n    Axios.get(`${API_URL}/getRecent`).then((res) => {\n      setData(res.data);\n      setLoader(false);\n    });\n  }, [newData]);\n\n  console.log(newData);\n  return (\n    <div style={{ flex: 1 }}>\n      <Header />\n      <Addurl setNewData={setNewData} />\n\n      {loader ? (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      ) : (\n        <RecentUrls data={data} />\n      )}\n    </div>\n  );\n}\n\nexport default Home;\n","import Axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { API_URL } from \"../utils/gen.utils\";\nconst Redirect = () => {\n  let { id } = useParams();\n  useEffect(() => {\n    Axios.post(`${API_URL}/get`, { id: id }).then((res) => {\n      let originaUrl = res.data[0].OriginalUrl;\n      window.location = originaUrl;\n    });\n  }, [id]);\n  return (\n    <div style={{ marginTop: 100 }}>\n      <Spinner animation=\"border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    </div>\n  );\n};\nexport default Redirect;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./screens/home\";\nimport Redirect from \"./screens/redirect\";\nconst Routes = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/:id\" exact component={Redirect} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\nexport default Routes;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Routes from \"./routes\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialNewsState = {\n  user: {},\n  isLoggedin: false,\n};\nconst userReducer = (state = initialNewsState, action) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        ...state,\n        user: action.payload,\n        isLoggedin: true,\n      };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        user: null,\n        isLoggedin: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from \"redux\";\nimport userReducer from \"./userReducer\";\n\nconst rootReducer = combineReducers({\n  userReducer\n});\n\nexport default rootReducer;\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport logger from \"redux-logger\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst middleware = thunk;\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n  let store = createStore(\n    persistedReducer,\n    compose(applyMiddleware(middleware, logger))\n  );\n  let persistor = persistStore(store);\n  return { store, persistor };\n};\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport persist from \"./store\";\n\nconst persistStore = persist();\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={persistStore.store}>\n      <PersistGate\n        loading={<Spinner animation=\"border\" variant=\"warning\" />}\n        persistor={persistStore.persistor}\n      >\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}